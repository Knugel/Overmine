"use strict";(self.webpackChunkovermine=self.webpackChunkovermine||[]).push([[990],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=i,m=u["".concat(c,".").concat(h)]||u[h]||d[h]||a;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},458:function(e,t,n){n.r(t),n.d(t,{Square:function(){return u},assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],s={title:"Using the Behavior Graph",sidebar_position:2},c=void 0,l={unversionedId:"getting-started/graph",id:"getting-started/graph",title:"Using the Behavior Graph",description:"Allmost every behavior in UnderMine is controlled using what's called a behavior graph.",source:"@site/docs/getting-started/graph.mdx",sourceDirName:"getting-started",slug:"/getting-started/graph",permalink:"/Overmine/getting-started/graph",draft:!1,editUrl:"https://github.com/Knugel/Overmine/tree/docs/docs/getting-started/graph.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Using the Behavior Graph",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Setup",permalink:"/Overmine/getting-started/setup"},next:{title:"Items",permalink:"/Overmine/category/items"}},p={},d=[{value:"Example",id:"example",level:2}],u=function(e){var t=e.color;return(0,a.kt)("div",{style:{backgroundColor:t,borderRadius:"4px",color:"#fff",width:"16px",height:"16px",display:"inline-block",marginRight:".5rem"}})},h={toc:d,Square:u};function m(e){var t=e.components,s=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Allmost every behavior in UnderMine is controlled using what's called a behavior graph."),(0,a.kt)("p",null,"A tree is made up of a set of actions and conditions that allow you to define your behavior visually."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"Let's look at an example of a very simple relic.\nThe ",(0,a.kt)("a",{parentName:"p",href:"https://undermine.fandom.com/wiki/Petrified_Rock"},"Petrified Rock"),". This relic increases the chance of items dropping from destroyed rocks by 6x.",(0,a.kt)("br",null),"\nHere is the whole behavior tree.\n",(0,a.kt)("img",{src:n(1217).Z,width:"1545",height:"953"})),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"All nodes have a color depending on their type:"),(0,a.kt)("h4",{parentName:"div",id:"-decorator"},(0,a.kt)(u,{color:"#42AA8C",mdxType:"Square"})," Decorator"),(0,a.kt)("p",{parentName:"div"},"A decorator is a node that can have only a single child.\nIt is up to the Decorator to decide if, when and how many times the child should be executed."),(0,a.kt)("h4",{parentName:"div",id:"-condition"},(0,a.kt)(u,{color:"#F9C64F",mdxType:"Square"})," Condition"),(0,a.kt)("p",{parentName:"div"},"A condition is a node that decides if nodes following it should execute.\nIt returns ",(0,a.kt)("inlineCode",{parentName:"p"},"Success")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Failure")," depending on if the condition is fulfilled or not."),(0,a.kt)("h4",{parentName:"div",id:"-action"},(0,a.kt)(u,{color:"#F93F44",mdxType:"Square"})," Action"),(0,a.kt)("p",{parentName:"div"},"An action node has is any node that impacts the game world. Actions can't have children."),(0,a.kt)("h4",{parentName:"div",id:"-composite"},(0,a.kt)(u,{color:"#267CA0",mdxType:"Square"})," Composite"),(0,a.kt)("p",{parentName:"div"},"A composite node groups multiple children into a branch."))),(0,a.kt)("p",null,"As the tree is always executed left to right, top to bottom we can see that the first group evaluated is this."),(0,a.kt)("p",null,"This group of three nodes is something almost all StatusEffect behaviors in UnderMine have.\nIt simply checks if the remaining duration is equal to 0 and inverts the result.",(0,a.kt)("br",null),"\nMeaning the effect can only execute if there is some remaining duration left.\n",(0,a.kt)("img",{src:n(2566).Z,width:"978",height:"897"})),(0,a.kt)("p",null,"Lets look at the actual effect of the petrified rock.\nFirst we wait for any entity to die. Storing the resulting entity in our ",(0,a.kt)("inlineCode",{parentName:"p"},"Target")," Shared Variable.\nThis allows us to access it in other nodes.\n",(0,a.kt)("img",{src:n(9795).Z,width:"987",height:"751"})),(0,a.kt)("p",null,"Now we check if the entity that has died is actually a rock. ",(0,a.kt)("br",null),"\nOtherwise we would modify the drop-rate of all things.\nWe do this by checking if the entity has a tag of ",(0,a.kt)("inlineCode",{parentName:"p"},"rock"),".",(0,a.kt)("br",null),"\nUsing the ",(0,a.kt)("inlineCode",{parentName:"p"},"Target")," we stored earlier as the input.\n",(0,a.kt)("img",{src:n(1571).Z,width:"931",height:"523"})),(0,a.kt)("p",null,"Finally we simply multiply the drop chance of our ",(0,a.kt)("inlineCode",{parentName:"p"},"Target")," by 6.\n",(0,a.kt)("img",{src:n(5450).Z,width:"795",height:"434"})))}m.isMDXComponent=!0},1217:function(e,t,n){t.Z=n.p+"assets/images/rock-4790e5fce32701d1cb00a9b5f4c02b78.png"},2566:function(e,t,n){t.Z=n.p+"assets/images/rock_group1-d0c5853e6392c29b52f431f2bf071681.png"},9795:function(e,t,n){t.Z=n.p+"assets/images/rock_group2-1a9e99fafcf489df3fbd2b415b1e4f6e.png"},1571:function(e,t,n){t.Z=n.p+"assets/images/rock_group3-52b0937d1336cb6914a894b692c56084.png"},5450:function(e,t,n){t.Z=n.p+"assets/images/rock_group4-a559a97ac8d37954bf5ac548ada67555.png"}}]);